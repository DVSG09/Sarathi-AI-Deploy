[
  {
    "id": 1,
    "source": "https://mypursu.com/",
    "content": "Mypursu Home Mypursu Remit About Us Careers Blogs Contact Us FAQ Corporate Login Are you an NRI living abroad looking for services in India? MyPursu has got you covered Bill payment, mailbox, shipping‚Äîyou name it. MyPursu helps you with many services in India. Download The App Now Merchant Payments Accept secure UPI, cards & wallet payments from customers. Mypursu Remit Seamless and secure bank-to-bank money transfers with MyPursu Remit. Recharge & Bill Payment Instantly pay bills and recharge your mobile, or utilities anytime, anywhere. PackNShip Services Convenient shipping solutions delivered right to your doorstep. Travel Bookings Convenient and effortless travel bookings(Cab, Hotel, Flight) made simple and fast. Mailbox services Personal mailing address for receiving and managing your parcels with ease. Exclusive Offers You Can‚Äôt Miss ! Don‚Äôt miss out on these limited-time offers crafted to give you the best value ‚Äî because great deals don‚Äôt last forever! PNS offer of 640 New User Offer - Get ‚Çπ640 /Kg for first courier shipment/Order Remit2any offer Unlock Exclusive rates on your first $100 Buy Concierge Package For first $100 get 1$ = ‚Çπ92 Sign up offer of 850 Sign Up and get ‚Çπ850 as bonus MyPursu Remit Your Exclusive Advantage! Send Money Home at Rates No One Else Gets! New Users - Exchange rate $1 = ‚Çπ100 or more ‚Çπ85.32 FOR THE FIRST $100 Remit Now üì¨ Free Mailbox Address ‚Äì your own personal Indian address üöö ‚Çπ600 Courier Credit ‚Äì use it for your first shipment! ‚ö° Watch Your Money Reach India Instantly üí∏ Zero Fees on All Transactions üí∏ For existing user our exchange rate is $1 = ‚Çπ87.7 3 Steps Closer To Home Effortless, quick, and secure money transfers to India. Sign Up form Set up an account just with your email or login with your Gmail. USA - KYC & Add account Use US Driver‚Äôs License, US Passport, Visa with Foreign Passport among others. India - KYC & Add account A valid PAN and one of the Aadhar, Driver‚Äôs License, Passport or Voter ID are required. To comply "
  },
  {
    "id": 2,
    "source": "https://mypursu.com/",
    "content": "Mypursu Home Mypursu Remit About Us Careers Blogs Contact Us FAQ Corporate Login Are you an NRI living abroad looking for services in India? MyPursu has got you covered Bill payment, mailbox, shipping‚Äîyou name it. MyPursu helps you with many services in India. Download The App Now Merchant Payments Accept secure UPI, cards & wallet payments from customers. Mypursu Remit Seamless and secure bank-to-bank money transfers with MyPursu Remit. Recharge & Bill Payment Instantly pay bills and recharge your mobile, or utilities anytime, anywhere. PackNShip Services Convenient shipping solutions delivered right to your doorstep. Travel Bookings Convenient and effortless travel bookings(Cab, Hotel, Flight) made simple and fast. Mailbox services Personal mailing address for receiving and managing your parcels with ease. Exclusive Offers You Can‚Äôt Miss ! Don‚Äôt miss out on these limited-time offers crafted to give you the best value ‚Äî because great deals don‚Äôt last forever! PNS offer of 640 New User Offer - Get ‚Çπ640 /Kg for first courier shipment/Order Remit2any offer Unlock Exclusive rates on your first $100 Buy Concierge Package For first $100 get 1$ = ‚Çπ92 Sign up offer of 850 Sign Up and get ‚Çπ850 as bonus MyPursu Remit Your Exclusive Advantage! Send Money Home at Rates No One Else Gets! New Users - Exchange rate $1 = ‚Çπ100 or more ‚Çπ85.32 FOR THE FIRST $100 Remit Now üì¨ Free Mailbox Address ‚Äì your own personal Indian address üöö ‚Çπ600 Courier Credit ‚Äì use it for your first shipment! ‚ö° Watch Your Money Reach India Instantly üí∏ Zero Fees on All Transactions üí∏ For existing user our exchange rate is $1 = ‚Çπ87.7 3 Steps Closer To Home Effortless, quick, and secure money transfers to India. Sign Up form Set up an account just with your email or login with your Gmail. USA - KYC & Add account Use US Driver‚Äôs License, US Passport, Visa with Foreign Passport among others. India - KYC & Add account A valid PAN and one of the Aadhar, Driver‚Äôs License, Passport or Voter ID are required. To comply "
  },
  {
    "id": 3,
    "source": "sarathi dc.pdf",
    "content": "main.py \n‚Ä¢ \nEntry point of your backend app. \n‚Ä¢ \nShows how the FastAPI app is created, routes (API endpoints) are included, CORS and static files are \nconfigured. \n‚Ä¢ \nExplains how frontend files are served and API routing is connected. \n \n2. routerchat.py (or equivalent router file) \n‚Ä¢ \nContains the real chatbot API endpoint /api/v1/chat. \n‚Ä¢ \nHandles incoming chat requests and calls chatbot logic. \n‚Ä¢ \nShows how request and response models (schemas.py) are used. \n \n3. schemas.py \n‚Ä¢ \nDefines request and response data models (Pydantic models). \n‚Ä¢ \nHelps validate and structure incoming user messages and outgoing chatbot replies. \n \n4. Chatbot logic files (like services/agent.py) \n‚Ä¢ \nThis is where the actual chatbot \"brain\" lives. \n‚Ä¢ \nImplements message handling, intent recognition, response generation, or integration with AI \nservices. \n‚Ä¢ \nYou may want to explain this part briefly or point out how it fits in. \n \n5. requirements.txt \n‚Ä¢ \nLists all Python dependencies needed to run the project. \n‚Ä¢ \nUseful to explain project setup and reproducibility. \n \n6. Frontend (index.html + JavaScript inside it) \n‚Ä¢ \nShows the UI structure and how user inputs are captured. \n‚Ä¢ \nDemonstrates how JavaScript sends API requests to the backend and displays responses. \n‚Ä¢ \nExplains the flow from user typing to receiving bot reply. \n \nQuick summary you can say: \n‚ÄúThe main.py sets up the backend server and includes our chatbot API router defined in routerchat.py. That \nrouter handles POST requests to /api/v1/chat, validates input with Pydantic models from schemas.py, and \ncalls the chatbot logic implemented in services/agent.py to generate replies. \nOn the frontend, index.html provides a simple chat UI and uses JavaScript fetch calls to communicate with \nthe backend API. \nThe dependencies are listed in requirements.txt to ensure consistent setup.‚Äù \n \nIf you want, I can help you prepare a short walkthrough or bullet points for each file! \nYou said: \ncan u explain me thses files indivudually \nChatGPT said: \nSure! Here‚Äôs a clear explanation of each important file individually, so you can understand and explain their \npurpose and logic confidently: \n \n1. main.py \nThis is the entry point of your backend FastAPI application. \n‚Ä¢ \nWhat it does: \no \nCreates a FastAPI app instance. \no \nSets up CORS middleware so the frontend (which might run on a different origin) can \ncommunicate with backend without security issues. \no \nServes static files (like your index.html and related assets) so the frontend can load in the \nbrowser. \no \nIncludes the chatbot router (routerchat.py) that handles all chatbot-related API endpoints. \no \nDefines simple routes like / to serve the frontend HTML page and /health for a basic health \ncheck. \n‚Ä¢ \nWhy it matters: \nIt wires everything together ‚Äî backend API, static files, middleware ‚Äî so your app works as a single \nserver. \n \n2. routerchat.py \nThis file is an API router module dedicated to chatbot endpoints. \n‚Ä¢ \nWhat it does: \no \nDefines API routes under a prefix like /api/v1. \no \nHandles POST requests to /api/v1/chat. \no \nAccepts a chat request with user_id and message in JSON format. \no \nCalls the chatbot processing logic (handle_message) to generate a reply. \no \nReturns a structured response containing the chatbot‚Äôs reply and additional metadata like \nlatency or intent. \n‚Ä¢ \nWhy it matters: \nThis file is the bridge between the frontend chat input and the backend chatbot logic. \n \n3. schemas.py \nDefines data models using Pydantic for request validation and response formatting. \n‚Ä¢ \nWhat it does: \no \nChatRequest model describes what input the API expects (e.g., user_id, message). \no \nChatResponse model describes what the API returns (e.g., reply text, any tool calls made, \nlatency info). \no \nHelps ensure the API gets and returns data in the correct structure and types. \no \nProvides automatic validation and error handling for bad inputs. \n‚Ä¢ \nWhy it matters: \nIt guarantees your API receives and sends well-formed data, improving robustness. \n \n4. Chatbot logic file (like services/agent.py) \nThis is the core logic where your chatbot ‚Äúthinks.‚Äù \n‚Ä¢ \nWhat it does: \no \nProcesses the user message to understand intent. \no \nDecides what reply to send back. \no \nMay call other APIs, databases, or perform business logic. \no \nReturns a reply string and metadata (like whether it escalated to a human, what intents were \ndetected). \n‚Ä¢ \nWhy it matters: \nThis is the brain of your chatbot ‚Äî all the AI or rule-based responses happen here. \n \n5. requirements.txt \nLists all Python dependencies your project needs. \n‚Ä¢ \nWhat it does: \no \nSpecifies exact package names and versions (like FastAPI, Uvicorn, Pydantic). \no \nAllows anyone to install the correct packages with a single command (pip install -r \nrequirements.txt). \no \nEnsures your project environment is reproducible and consistent. \n‚Ä¢ \nWhy it matters: \nThis file helps with setup and deployment ‚Äî so your app runs everywhere the same. \n \n6. Frontend file: index.html \nThe user interface your users interact with. \n‚Ä¢ \nWhat it does: \no \nProvides a simple chat window with input box and send button. \no \nDisplays user messages and bot replies in a styled chat area. \no \nUses JavaScript to capture user input, send it as a POST request to the backend API \n(/api/v1/chat). \no \nShows responses from the backend dynamically in the chat window. \no \nSupports pressing Enter key to send messages. \n‚Ä¢ \nWhy it matters: \nIt‚Äôs the face of your chatbot, connecting users to your backend AI service. \n \n"
  },
  {
    "id": 4,
    "source": "sarathi dc.pdf",
    "content": "main.py \n‚Ä¢ \nEntry point of your backend app. \n‚Ä¢ \nShows how the FastAPI app is created, routes (API endpoints) are included, CORS and static files are \nconfigured. \n‚Ä¢ \nExplains how frontend files are served and API routing is connected. \n \n2. routerchat.py (or equivalent router file) \n‚Ä¢ \nContains the real chatbot API endpoint /api/v1/chat. \n‚Ä¢ \nHandles incoming chat requests and calls chatbot logic. \n‚Ä¢ \nShows how request and response models (schemas.py) are used. \n \n3. schemas.py \n‚Ä¢ \nDefines request and response data models (Pydantic models). \n‚Ä¢ \nHelps validate and structure incoming user messages and outgoing chatbot replies. \n \n4. Chatbot logic files (like services/agent.py) \n‚Ä¢ \nThis is where the actual chatbot \"brain\" lives. \n‚Ä¢ \nImplements message handling, intent recognition, response generation, or integration with AI \nservices. \n‚Ä¢ \nYou may want to explain this part briefly or point out how it fits in. \n \n5. requirements.txt \n‚Ä¢ \nLists all Python dependencies needed to run the project. \n‚Ä¢ \nUseful to explain project setup and reproducibility. \n \n6. Frontend (index.html + JavaScript inside it) \n‚Ä¢ \nShows the UI structure and how user inputs are captured. \n‚Ä¢ \nDemonstrates how JavaScript sends API requests to the backend and displays responses. \n‚Ä¢ \nExplains the flow from user typing to receiving bot reply. \n \nQuick summary you can say: \n‚ÄúThe main.py sets up the backend server and includes our chatbot API router defined in routerchat.py. That \nrouter handles POST requests to /api/v1/chat, validates input with Pydantic models from schemas.py, and \ncalls the chatbot logic implemented in services/agent.py to generate replies. \nOn the frontend, index.html provides a simple chat UI and uses JavaScript fetch calls to communicate with \nthe backend API. \nThe dependencies are listed in requirements.txt to ensure consistent setup.‚Äù \n \nIf you want, I can help you prepare a short walkthrough or bullet points for each file! \nYou said: \ncan u explain me thses files indivudually \nChatGPT said: \nSure! Here‚Äôs a clear explanation of each important file individually, so you can understand and explain their \npurpose and logic confidently: \n \n1. main.py \nThis is the entry point of your backend FastAPI application. \n‚Ä¢ \nWhat it does: \no \nCreates a FastAPI app instance. \no \nSets up CORS middleware so the frontend (which might run on a different origin) can \ncommunicate with backend without security issues. \no \nServes static files (like your index.html and related assets) so the frontend can load in the \nbrowser. \no \nIncludes the chatbot router (routerchat.py) that handles all chatbot-related API endpoints. \no \nDefines simple routes like / to serve the frontend HTML page and /health for a basic health \ncheck. \n‚Ä¢ \nWhy it matters: \nIt wires everything together ‚Äî backend API, static files, middleware ‚Äî so your app works as a single \nserver. \n \n2. routerchat.py \nThis file is an API router module dedicated to chatbot endpoints. \n‚Ä¢ \nWhat it does: \no \nDefines API routes under a prefix like /api/v1. \no \nHandles POST requests to /api/v1/chat. \no \nAccepts a chat request with user_id and message in JSON format. \no \nCalls the chatbot processing logic (handle_message) to generate a reply. \no \nReturns a structured response containing the chatbot‚Äôs reply and additional metadata like \nlatency or intent. \n‚Ä¢ \nWhy it matters: \nThis file is the bridge between the frontend chat input and the backend chatbot logic. \n \n3. schemas.py \nDefines data models using Pydantic for request validation and response formatting. \n‚Ä¢ \nWhat it does: \no \nChatRequest model describes what input the API expects (e.g., user_id, message). \no \nChatResponse model describes what the API returns (e.g., reply text, any tool calls made, \nlatency info). \no \nHelps ensure the API gets and returns data in the correct structure and types. \no \nProvides automatic validation and error handling for bad inputs. \n‚Ä¢ \nWhy it matters: \nIt guarantees your API receives and sends well-formed data, improving robustness. \n \n4. Chatbot logic file (like services/agent.py) \nThis is the core logic where your chatbot ‚Äúthinks.‚Äù \n‚Ä¢ \nWhat it does: \no \nProcesses the user message to understand intent. \no \nDecides what reply to send back. \no \nMay call other APIs, databases, or perform business logic. \no \nReturns a reply string and metadata (like whether it escalated to a human, what intents were \ndetected). \n‚Ä¢ \nWhy it matters: \nThis is the brain of your chatbot ‚Äî all the AI or rule-based responses happen here. \n \n5. requirements.txt \nLists all Python dependencies your project needs. \n‚Ä¢ \nWhat it does: \no \nSpecifies exact package names and versions (like FastAPI, Uvicorn, Pydantic). \no \nAllows anyone to install the correct packages with a single command (pip install -r \nrequirements.txt). \no \nEnsures your project environment is reproducible and consistent. \n‚Ä¢ \nWhy it matters: \nThis file helps with setup and deployment ‚Äî so your app runs everywhere the same. \n \n6. Frontend file: index.html \nThe user interface your users interact with. \n‚Ä¢ \nWhat it does: \no \nProvides a simple chat window with input box and send button. \no \nDisplays user messages and bot replies in a styled chat area. \no \nUses JavaScript to capture user input, send it as a POST request to the backend API \n(/api/v1/chat). \no \nShows responses from the backend dynamically in the chat window. \no \nSupports pressing Enter key to send messages. \n‚Ä¢ \nWhy it matters: \nIt‚Äôs the face of your chatbot, connecting users to your backend AI service. \n \n"
  }
]
